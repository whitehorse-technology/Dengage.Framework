//
//  Settings.swift
//  self.ios.sdk
//
//  Created by Ekin Bulut on 27.11.2019.
//  Copyright Â© 2019 self. All rights reserved.
//

import Foundation

internal class Settings {

    static let shared = Settings()
    
    let storage: DengageLocalStorage
    let logger: SDKLogger
    
    //MARK: - Variables
    var integrationKey: String = ""
    var token: String? = ""
    var carrierId: String = ""
    var sdkVersion: String
    var advertisingId: String = ""
    var applicationIdentifier : String = ""
    var contactKey: String = ""
    var appVersion: String = ""
    var sessionId: String = ""
    var referrer: String?
    var campSource: String?
    var sendId: String?
    
    var testGroup: String = ""
    
    var badgeCountReset: Bool?
    var permission: Bool?
    var sessionStarted: Bool
    
    var useCloudForSubscription: Bool = false
    var registerForRemoteNotification: Bool = true
    
    var queueLimit = QUEUE_LIMIT
    
    init() {
        sdkVersion = SDK_VERSION
        permission = false
        badgeCountReset = true
        storage = DengageLocalStorage.shared
        logger = SDKLogger.shared
        sessionStarted = false
        
    }
    
    init(storage:  DengageLocalStorage = .shared, logger: SDKLogger = .shared){
        
        self.storage = storage
        self.logger = logger
        sdkVersion = SDK_VERSION
        permission = false
        badgeCountReset = true
        sessionStarted = false
    }

    // MARK: -  functions
    func setRegiterForRemoteNotification(enable: Bool)
    {
        self.registerForRemoteNotification = enable
    }
    
    func getRegiterForRemoteNotification() -> Bool {
        
        return self.registerForRemoteNotification
    }
    
    @available(swift, deprecated: 2.5.0)
    func setCloudEnabled(status: Bool) {
        self.useCloudForSubscription = status
    }
    
    @available(swift, deprecated: 2.5.0)
    func getCloudEnabled() -> Bool {
        
        return self.useCloudForSubscription
    }
    
    func setTestGroup(testGroup: String) {
        
        self.testGroup = testGroup
    }
    
    func getTestGroup() -> String {
        
        return testGroup
    }
    
    func setSessionStart(status: Bool) {
        self.sessionStarted = status
    }
    
    func getSessionStart() -> Bool {
        
        return self.sessionStarted
    }
    
    func setSessionId(sessionId: String) {
        
        self.sessionId = sessionId
    }
    
    func getSessionId() -> String {
        
        return  self.sessionId
    }
    
    func setSdkVersion(sdkVersion: String) {
        
        self.sdkVersion = sdkVersion
    }
    
    func getSdkVersion() -> String {
        
        return self.sdkVersion
    }
    
    func setCarrierId(carrierId: String) {
        
        self.carrierId = carrierId;
    }
    
    func getCarrierId() -> String {
        
        return self.carrierId
    }

    func setAdvertisingId(advertisingId:String) {
        
        self.advertisingId = advertisingId
    }
    
    func getAdvertisinId() -> String? {
        
        return self.advertisingId
    }

    /// ApplicationIdentifier can be set by api user or generated by sdk.
    /// - Parameter applicationIdentifier : Udid
    func setApplicationIdentifier(applicationIndentifier: String) {
        
        storage.setValueWithKey(value: applicationIndentifier, key: "ApplicationIdentifier")
        self.applicationIdentifier = applicationIndentifier
    }
    
    func getApplicationIdentifier() -> String {
        
        return applicationIdentifier;
    }
    
    func setDengageIntegrationKey(integrationKey: String) {
        
        self.integrationKey = integrationKey
    }
    
    func getDengageIntegrationKey() -> String {
        
        return self.integrationKey
    }
    
    func  setBadgeCountReset(badgeCountReset: Bool?) {
        
        self.badgeCountReset = badgeCountReset
    }
    
    func getBadgeCountReset() -> Bool? {
        
        return self.badgeCountReset
    }

    func setContactKey(contactKey: String?) {
        
        let previous = getContactKey()
        if(previous != contactKey){
            self.contactKey = contactKey ?? ""
            storage.setValueWithKey(value: contactKey ?? "", key: "ContactKey")
            self.contactKey = storage.getValueWithKey(key: "ContactKey") ?? ""
            Dengage.syncSubscription()
        }
        
    }
    
    func getContactKey() -> String? {
        
        self.contactKey = storage.getValueWithKey(key: "ContactKey") ?? ""
        return self.contactKey
    }
    
    func setToken(token: String) {
        
        let previous = getToken()
        if(previous != token){
            self.token = token
            storage.setValueWithKey(value: token, key: "Token")
            logger.Log(message:"TOKEN %s", logtype: .debug, argument: self.token!)
            Dengage.syncSubscription()
        }
    }
    
    func getToken() -> String?{
        
        self.token = storage.getValueWithKey(key: "Token")
        return self.token
    }

    func setAppVersion(appVersion: String) {

        self.appVersion = appVersion
    }
    
    func getAppversion() -> String? {
        return self.appVersion
    }
    
    func setPermission(permission: Bool?) {
        let previous = getPermission()
        if(previous != permission){
            storage.setValueWithKey(value: permission, key: "userPermission")
            self.permission = permission
            Dengage.syncSubscription()
        }
    }
    
    func getPermission() -> Bool? {
        let permission = storage.getValueWithKeyWith(key: "userPermission") as Any?
        return permission as! Bool?
    }
    
    func getUserAgent() -> String {
        return UAString()
    }
    
    func getEventApiUrl() -> String {
        guard let eventUrl = Bundle.main.object(forInfoDictionaryKey: "DengageEventApiUrl") as? String else { return EVENT_SERVICE_URL }
        logger.Log(message:"EVENT_API_URL is %s", logtype: .debug, argument: eventUrl)
        return eventUrl
    }
    
    func setChannel(source: String) {
//        storage.setValueWithKey(value: campId, key: "dn_camp_id")
        self.campSource = source
        setCampDate()
        logger.Log(message:"CHANNEL is %s", logtype: .debug, argument: self.campSource ?? "")
    }

    func getChannel()-> String? {
//        return storage.getValueWithKey(key: "dn_camp_id")
        return self.campSource
    }

    func setSendId(sendId: String) {
//        storage.setValueWithKey(value: sendId, key: "dn_send_id")
        self.sendId = sendId
        logger.Log(message:"SEND_ID is %s", logtype: .debug, argument: self.sendId ?? "")
    }

    func getSendId() -> String? {

        return self.sendId
//        return storage.getValueWithKey(key: "dn_send_id")
    }
    
    func setCampDate() {
      
        let date = NSDate() // Get Todays Date
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "dd-MM-yyyy HH:mm:ss"
        let stringDate: String = dateFormatter.string(from: date as Date)
        
        storage.setValueWithKey(value: stringDate, key: "dn_camp_date")
        logger.Log(message:"CampDate is %s", logtype: .debug, argument: stringDate)
    }
    
    func getCampDate() -> NSDate? {
        
        let dateFormatter = DateFormatter()
        // Our date format needs to match our input string format
        dateFormatter.dateFormat = "dd-MM-yyyy HH:mm:ss"
        let campDate = storage.getValueWithKey(key: "dn_camp_date")
        let dateFromString = dateFormatter.date(from: campDate!)
        
        return dateFromString as NSDate?
    }
    
    func setReferrer(referrer: String) {
        self.referrer = referrer
    }
    
    func getReferrer()-> String? {
        return self.referrer
    }
    
    func getSubscriptionApi() -> String {
        guard let dengageApiUrl = Bundle.main.object(forInfoDictionaryKey: "DengageApiUrl") as? String else { return SUBSCRIPTION_SERVICE_URL }
        return dengageApiUrl
    }
    
    func getQueueLimit() -> Int {
        return self.queueLimit
    }
}
